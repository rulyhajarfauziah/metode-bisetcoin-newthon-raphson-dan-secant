# menyelesaikan persamaan non linear x**3 + x**2 - 3x - 3
# metode bisection
#  Mengimport library yang digunakan 
import numpy as np
import matplotlib.pyplot as plt
from time import perf_counter as pc

# mendefinisikan fungsi

def f(x):
  return x**3 + x**2 - 3*x - 3

def bisection(a, b, tol=1e-6, max_iter=100):
  fa, fb = f(a), f(b)
  if fa * fb > 0:
    raise ValueError("f(a) dan f(b) harus berlawanan tanda. Pilih interval lain.")
  history = []
  start = pc()
  for i in range(1, max_iter + 1):
    c = (a + b) / 2.0
    fc = f(c)
    history.append((i, a, b, c, fc))
    print(f"Iter {i:2d}: a={a:.8f}, b={b:.8f}, c={c:.8f}, f(c)={fc:.8e}")
    if abs(fc) < tol or (b - a)/2.0 < tol:
      end = pc()
      print(f"\nAkar diperkirakan di x = {c:.12f}")
      print(f"f (c) = {fc:.12e}")
      print(f"Iterasi = {i}, waktu = {(end-start):.6f} s")
      return c, history
    if fa * fc < 0:
      b = c
      fb = fc
    else:
      a = c
      fa = fc
  end = pc()
  print("\nMetode tidak konvergen dalam batas iterasi.")
  return c, history

# Menjalankan metode pada interval [1, 2]
akar, hist = bisection(1, 2, tol=1e-6, max_iter=100)

# Visualisasi fungsi titik-titik mid tiap iterasi
x_vals = np.linspace(-2, 4, 400)
y_vals = f(x_vals)

plt.figure(figsize=(9, 6))
plt.plot(x_vals, y_vals, 'k', label='f(x)')
plt.axhline(0, color='gray', linestyle='--')
plt.title('Visualisasi f(x) = x³ + x² - 3x - 3 dan Titik Iterasi')

# Bisection
midpoints = [row[3] for row in hist]
plt.scatter(midpoints, [f(x) for x in midpoints], color='purple', label='Bisection', zorder=5)
plt.legend()
plt.xlabel('x')
plt.ylabel('f(x)')
plt.grid(True)
plt.show()
